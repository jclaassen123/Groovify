package com.groovify.jpa.model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

/**
 * Represents a user entity in the Groovify application.
 * <p>
 * Each {@code Users} record corresponds to a row in the {@code users} table,
 * storing user credentials, profile image information, and a short description.
 */
@Entity
@Table(name = "users")
public class Users {

    /**
     * The unique identifier for the user.
     * This value is automatically generated by the database.
     */
    @Id
    @GeneratedValue
    private Integer id;

    /**
     * The file name of the user's profile image.
     * Stored in the {@code image_file_name} column.
     */
    @Column(name = "image_file_name")
    private String image_file_name;

    /**
     * A short description or bio for the user.
     */
    @Column(name = "Description")
    private String Description;

    /**
     * The unique username of the user.
     * Cannot be null or duplicated.
     */
    @NotBlank(message = "Username cannot be empty")
    @Size(min = 3, max = 32, message = "Username must be at least 3 characters")
    @Column(name = "name", nullable = false, unique = true)
    private String name;

    /**
     * The password associated with the user's account.
     * Cannot be null.
     */
    @NotBlank(message = "Password cannot be empty")
    @Size(min = 6, max = 100, message = "Password must be at least 6 characters")
    @Column(nullable = false)
    private String password;

    public Users(String username, String password) {
    }

    public Users() {

    }

    // -----------------------------------
    // Getters and Setters
    // -----------------------------------

    public Integer getId() { return id; }
    public void setId(Integer id) { this.id = id; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }

    /**
     * Retrieves the name of the user's profile image file.
     * <p>
     * If the stored image file name is missing or the corresponding image
     * file cannot be found in the {@code static/images} folder, a default
     * image file name is returned instead.
     *
     * @return the valid image file name or a default value if not found
     */
    public String getImageFileName() {
        // Default image
        String defaultImage = "Fishing.jpg";

        // Folder where your images are stored
        Path imagesFolder = Paths.get("src/main/resources/static/images");

        if (image_file_name == null) {
            return defaultImage;
        }

        // Check if the file exists in the folder
        Path imagePath = imagesFolder.resolve(image_file_name);
        if (Files.exists(imagePath)) {
            return image_file_name;
        } else {
            return defaultImage;
        }
    }
    public void setImageFileName(String image_file_name) { this.image_file_name = image_file_name; }

    public String getDescription() { return Description; }
    public void setDescription(String description) { this.Description = description; }

}
