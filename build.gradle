plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.groovify'
version = '0.0.1-SNAPSHOT'
description = 'Groovify Project'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
    // Dev tools for live reload
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Web + Thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // JPA (important!)
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // MySQL Connector
    runtimeOnly 'com.mysql:mysql-connector-j:9.4.0'

    // Spring Security

    // For reading mp3 metadata
    implementation 'com.mpatric:mp3agic:0.9.1'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(Test) {
    useJUnitPlatform()

    outputs.upToDateWhen { false }

    testLogging {
        events "failed"
        showStandardStreams = false
        exceptionFormat "short"
    }

    // ANSI color codes
    def GREEN = '\u001B[32m'
    def RED = '\u001B[31m'
    def RESET = '\u001B[0m'

    def passedTests = []
    def failedTests = []

    afterTest { desc, result ->
        def testId = "${desc.className}.${desc.name}"
        switch (result.resultType) {
            case org.gradle.api.tasks.testing.TestResult.ResultType.SUCCESS:
                passedTests << testId
                break
            case org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE:
                failedTests << testId
                break
        }
    }

    afterSuite { desc, result ->
        if (!desc.parent) {
            println ""
            println "------------------------------------------------------"
            println " Test Summary For: ${project.name}"
            println "------------------------------------------------------"

            if (passedTests) {
                println "PASSED:"
                passedTests.each { println " ${GREEN}- $it${RESET}" }
            } else {
                println "No tests passed."
            }

            println ""

            if (failedTests) {
                println "FAILED:"
                failedTests.each { println " ${RED}- $it${RESET}" }
            } else {
                println "No tests failed."
            }

            println ""
            println String.format(" Tests run: %d", result.testCount)
            println String.format(" Passed:    %d", result.successfulTestCount)
            println String.format(" Failed:    %d", result.failedTestCount)
            println String.format(" Skipped:   %d", result.skippedTestCount)
            println "------------------------------------------------------"
        }
    }
}
